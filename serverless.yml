service: my-service

provider:
  name: aws
  runtime: python3.9
  region: us-west-2
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if no stage is provided

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket  # Added permission to list the bucket
          Resource:
            - arn:aws:s3:::${self:custom.pdfBucketName}/*
            - arn:aws:s3:::${self:custom.pdfBucketName}

functions:
  generatePdf:
    handler: handler.generate_pdf
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: generate-pdf
          method: post
          cors:
            origin: '*'  # Allow requests from any origin
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true  # Allow cookies and credentials (optional based on your use case)

custom:
  pdfBucketName: my-pdf-report-bucket-${self:provider.region}-${self:provider.stage}-${opt:randomSeed, 'default'}

resources:
  Resources:
    PdfBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.pdfBucketName}
        AccessControl: Private  # Ensuring the bucket is private, unless you need public access

plugins:
  - serverless-python-requirements
  - serverless-offline
